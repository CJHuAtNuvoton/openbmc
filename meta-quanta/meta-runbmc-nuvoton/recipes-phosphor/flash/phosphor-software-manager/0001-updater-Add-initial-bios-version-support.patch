From 81c955bc4a525f6045ddb39ba6bfdb16f6573e32 Mon Sep 17 00:00:00 2001
From: kwliu <kwliu@nuvoton.com>
Date: Tue, 27 Aug 2019 12:06:22 +0800
Subject: [PATCH] updater: Add initial bios version support

---
 Makefile.am      |  3 ++
 bios-release     |  1 +
 configure.ac     |  2 ++
 item_updater.cpp | 93 +++++++++++++++++++++++++++++++++++++++++++++++-
 item_updater.hpp | 14 ++++++++
 5 files changed, 112 insertions(+), 1 deletion(-)
 create mode 100644 bios-release

diff --git a/Makefile.am b/Makefile.am
index 6c3ec16..587105e 100755
--- a/Makefile.am
+++ b/Makefile.am
@@ -21,6 +21,9 @@ bin_PROGRAMS = \
 dist_bin_SCRIPTS = \
 	obmc-flash-bmc
 
+dist_pkgdata_DATA = \
+    bios-release
+
 phosphor_version_software_manager_SOURCES = \
 	image_manager_main.cpp \
 	watch.cpp \
diff --git a/bios-release b/bios-release
new file mode 100644
index 0000000..490fafa
--- /dev/null
+++ b/bios-release
@@ -0,0 +1 @@
+VERSION_ID="N/A"
diff --git a/configure.ac b/configure.ac
index 2da97ad..f6e66e1 100755
--- a/configure.ac
+++ b/configure.ac
@@ -115,6 +115,8 @@ AC_DEFINE(SYSTEMD_PATH, "/org/freedesktop/systemd1",
     [The systemd path])
 AC_DEFINE(SYSTEMD_INTERFACE, "org.freedesktop.systemd1.Manager",
     [The systemd interface])
+AC_DEFINE(BIOS_FW_FILE, "/usr/share/phosphor-bmc-code-mgmt/bios-release",
+    [The name of the BIOS table of contents file])
 
 AC_ARG_VAR(MEDIA_DIR, [The base dir where all RO partitions are mounted])
 AS_IF([test "x$MEDIA_DIR" == "x"], [MEDIA_DIR="/media"])
diff --git a/item_updater.cpp b/item_updater.cpp
index 21fb6e0..5ae6f0d 100644
--- a/item_updater.cpp
+++ b/item_updater.cpp
@@ -136,6 +136,61 @@ void ItemUpdater::createActivation(sdbusplus::message::message& msg)
     return;
 }
 
+void ItemUpdater::processHostImage()
+{
+    using VersionClass = phosphor::software::manager::Version;
+
+    auto activationState = server::Activation::Activations::Active;
+    auto purpose = server::Version::VersionPurpose::Host;
+    auto biosRelease = fs::path(BIOS_FW_FILE);
+
+    if (!fs::is_regular_file(biosRelease))
+    {
+        log<level::ERR>("Failed to read biosRelease",
+                        entry("FILENAME=%s", biosRelease.string().c_str()));
+        return;
+    }
+
+    // Read bios-release from /usr/share/phosphor-bmc-code-mgmt to get the initial BIOS version
+    // The version may be chenaged by ipmi command, set system info.
+    auto initialVersion = VersionClass::getBMCVersion(biosRelease);
+    auto id = VersionClass::getId(initialVersion);
+    auto path = fs::path(SOFTWARE_OBJPATH) / id;
+    createFunctionalAssociation(path);
+
+    AssociationList associations = {};
+
+    // Create an association to the BMC inventory item
+    associations.emplace_back(std::make_tuple(ACTIVATION_FWD_ASSOCIATION,
+                                              ACTIVATION_REV_ASSOCIATION,
+                                              hostInventoryPath));
+
+    // Create an active association since this image is active
+    createActiveAssociation(path);
+
+    // Create Version instance for this version.
+    auto versionPtr = std::make_unique<VersionClass>(
+        bus, path, initialVersion, purpose, "",
+        std::bind(&ItemUpdater::erase, this, std::placeholders::_1));
+
+    versions.insert(std::make_pair(id, std::move(versionPtr)));
+
+    // Create Activation instance for this version.
+    activations.insert(std::make_pair(
+        id, std::make_unique<Activation>(bus, path, *this, id, activationState,
+                                         associations)));
+
+    uint8_t priority = std::numeric_limits<uint8_t>::max();
+    if (!restoreFromFile(id, priority))
+        priority = 0;
+
+    activations.find(id)->second->redundancyPriority =
+        std::make_unique<RedundancyPriority>(
+            bus, path, *(activations.find(id)->second), priority, false);
+
+    return;
+}
+
 void ItemUpdater::processBMCImage()
 {
     using VersionClass = phosphor::software::manager::Version;
@@ -257,7 +312,7 @@ void ItemUpdater::processBMCImage()
 
     // If there is no ubi volume for bmc version then read the /etc/os-release
     // and create rofs-<versionId> under /media
-    if (activations.size() == 0)
+    if (activations.size() < 2)
     {
         auto version = VersionClass::getBMCVersion(OS_RELEASE_FILE);
         auto id = phosphor::software::manager::Version::getId(version);
@@ -481,6 +536,42 @@ void ItemUpdater::restoreFieldModeStatus()
     }
 }
 
+
+void ItemUpdater::setHostInventoryPath()
+{
+    auto depth = 0;
+    auto mapperCall = bus.new_method_call(MAPPER_BUSNAME, MAPPER_PATH,
+                                          MAPPER_INTERFACE, "GetSubTreePaths");
+
+    mapperCall.append(INVENTORY_PATH);
+    mapperCall.append(depth);
+    std::vector<std::string> filter = {"xyz.openbmc_project.Inventory.Item.System"};
+    mapperCall.append(filter);
+
+    try
+    {
+        auto response = bus.call(mapperCall);
+
+        using ObjectPaths = std::vector<std::string>;
+        ObjectPaths result;
+        response.read(result);
+
+        if (!result.empty())
+        {
+            bmcInventoryPath = result.front();
+        }
+    }
+    catch (const sdbusplus::exception::SdBusError& e)
+    {
+        log<level::ERR>("Error in mapper GetSubTreePath");
+        return;
+    }
+
+    return;
+}
+
+
+
 void ItemUpdater::setBMCInventoryPath()
 {
     auto depth = 0;
diff --git a/item_updater.hpp b/item_updater.hpp
index aafd66b..4634cfd 100644
--- a/item_updater.hpp
+++ b/item_updater.hpp
@@ -58,6 +58,8 @@ class ItemUpdater : public ItemUpdaterInherit
     {
         setBMCInventoryPath();
         processBMCImage();
+        setHostInventoryPath();
+        processHostImage();
         restoreFieldModeStatus();
         emit_object_added();
     };
@@ -86,6 +88,11 @@ class ItemUpdater : public ItemUpdaterInherit
      */
     void processBMCImage();
 
+    /**
+     * @brief Create and populate the active BIOS Version.
+     */
+    void processHostImage();
+
     /**
      * @brief Erase specified entry D-Bus object
      *        if Action property is not set to Active
@@ -185,9 +192,16 @@ class ItemUpdater : public ItemUpdaterInherit
      *  /xyz/openbmc_project/inventory/system/chassis/. */
     void setBMCInventoryPath();
 
+    /** @brief Sets the System inventory item path under
+     *  /xyz/openbmc_project/inventory/system/chassis/. */
+    void setHostInventoryPath();
+
     /** @brief The path to the BMC inventory item. */
     std::string bmcInventoryPath;
 
+    /** @brief The path to the System inventory item. */
+    std::string hostInventoryPath;
+
     /** @brief Restores field mode status on reboot. */
     void restoreFieldModeStatus();
 
-- 
2.17.1

