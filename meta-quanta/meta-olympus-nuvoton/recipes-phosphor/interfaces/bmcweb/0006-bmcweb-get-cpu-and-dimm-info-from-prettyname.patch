From 1ea077281e0ef45af34231938afc533a4511fc65 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Tue, 19 Nov 2019 14:44:10 +0800
Subject: [PATCH] bmcweb: get cpu and dimm info from prettyname

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 redfish-core/lib/cpudimm.hpp | 111 ++++++++++++++++++++++++++++-------
 redfish-core/lib/systems.hpp |  35 ++++++++++-
 2 files changed, 123 insertions(+), 23 deletions(-)

diff --git a/redfish-core/lib/cpudimm.hpp b/redfish-core/lib/cpudimm.hpp
index ce36a0b..e7817f4 100644
--- a/redfish-core/lib/cpudimm.hpp
+++ b/redfish-core/lib/cpudimm.hpp
@@ -77,6 +77,7 @@ void getCpuDataByInterface(std::shared_ptr<AsyncResp> aResp,
     {
         for (const auto &property : interface.second)
         {
+#if 0
             if (property.first == "ProcessorCoreCount")
             {
                 const uint16_t *coresCount =
@@ -98,6 +99,50 @@ void getCpuDataByInterface(std::shared_ptr<AsyncResp> aResp,
 
                 aResp->res.jsonValue["TotalCores"] = *coresCount;
             }
+            else if (property.first == "ProcessorMaxSpeed")
+            {
+                aResp->res.jsonValue["MaxSpeedMHz"] = property.second;
+            }
+            else if (property.first == "ProcessorThreadCount")
+            {
+                aResp->res.jsonValue["TotalThreads"] = property.second;
+            }
+#else
+            if (property.first == "PrettyName")
+            {
+                 const std::string *value =
+                    std::get_if<std::string>(&property.second);
+                if (value != nullptr)
+                {
+                    std::vector<std::string> strs;
+                    boost::split(strs, *value, boost::is_any_of(" "));
+
+                    for (size_t i = 0; i < strs.size(); i++)
+                    {
+                        if (boost::find_first(strs[i], "GHz"))
+                        {
+                            aResp->res.jsonValue["MaxSpeedMHz"]
+                                = static_cast<int>(std::stof(strs[i-1]) * 1000);
+                        }
+                        else if (boost::find_first(strs[i], "MHz"))
+                        {
+                            aResp->res.jsonValue["MaxSpeedMHz"]
+                                = std::stoi(strs[i-1]);
+                        }
+                        else if (boost::find_first(strs[i], "Thread"))
+                        {
+                            aResp->res.jsonValue["ProcessorThreadCount"]
+                                = std::stoi(strs[i-1]);
+                        }
+                        else if (boost::find_first(strs[i], "Cores"))
+                        {
+                            aResp->res.jsonValue["TotalCores"]
+                                = std::stoi(strs[i-1]);
+                        }
+                    }
+                }
+            }
+#endif
             else if (property.first == "ProcessorType")
             {
                 aResp->res.jsonValue["Name"] = property.second;
@@ -122,14 +167,6 @@ void getCpuDataByInterface(std::shared_ptr<AsyncResp> aResp,
                     }
                 }
             }
-            else if (property.first == "ProcessorMaxSpeed")
-            {
-                aResp->res.jsonValue["MaxSpeedMHz"] = property.second;
-            }
-            else if (property.first == "ProcessorThreadCount")
-            {
-                aResp->res.jsonValue["TotalThreads"] = property.second;
-            }
             else if (property.first == "Model")
             {
                 const std::string *value =
@@ -205,6 +242,7 @@ void getCpuDataByService(std::shared_ptr<AsyncResp> aResp,
                 if (object.first.str == objPath)
                 {
                     getCpuDataByInterface(aResp, object.second);
+                    return;
                 }
                 else if (boost::starts_with(object.first.str, corePath))
                 {
@@ -383,7 +421,7 @@ void getDimmDataByService(std::shared_ptr<AsyncResp> aResp,
             }
             aResp->res.jsonValue["Id"] = dimmId;
             aResp->res.jsonValue["Name"] = "DIMM Slot";
-
+#if 0
             const auto memorySizeProperty = properties.find("MemorySizeInKB");
             if (memorySizeProperty != properties.end())
             {
@@ -406,26 +444,44 @@ void getDimmDataByService(std::shared_ptr<AsyncResp> aResp,
                 }
                 aResp->res.jsonValue["CapacityMiB"] = (*memorySize >> 10);
             }
+#endif
             aResp->res.jsonValue["Status"]["State"] = "Enabled";
             aResp->res.jsonValue["Status"]["Health"] = "OK";
 
             for (const auto &property : properties)
             {
-                if (property.first == "MemoryDataWidth")
-                {
-                    aResp->res.jsonValue["DataWidthBits"] = property.second;
-                }
-                else if (property.first == "PartNumber")
-                {
-                    aResp->res.jsonValue["PartNumber"] = property.second;
-                }
-                else if (property.first == "SerialNumber")
+                if (property.first == "PrettyName")
                 {
-                    aResp->res.jsonValue["SerialNumber"] = property.second;
+                    const auto *value =
+                        std::get_if<std::string>(&property.second);
+                    if (value != nullptr)
+                    {
+                        std::vector<std::string> values;
+                        boost::split(values, *value, boost::is_any_of(" "));
+                        for (size_t i = 0; i < values.size(); i++)
+                        {
+                            if (boost::starts_with(values[i], "DDR"))
+                            {
+                                aResp->res.jsonValue["MemoryType"] = "DRAM";
+                                aResp->res.jsonValue["MemoryDeviceType"] = values[i];
+                            }
+                            else if (boost::find_first(values[i], "MiB"))
+                            {
+                                aResp->res.jsonValue["CapacityMiB"]
+                                                = std::stoi(values[i-1]);
+                            } else if (boost::find_first(values[i], "Bits"))
+                            {
+                                aResp->res.jsonValue["DataWidthBits"]
+                                                = std::stoi(values[i-1]);
+
+                            }
+                        }
+                    }
                 }
-                else if (property.first == "Manufacturer")
+#if 0
+                if (property.first == "MemoryDataWidth")
                 {
-                    aResp->res.jsonValue["Manufacturer"] = property.second;
+                    aResp->res.jsonValue["DataWidthBits"] = property.second;
                 }
                 else if (property.first == "MemoryType")
                 {
@@ -440,6 +496,19 @@ void getDimmDataByService(std::shared_ptr<AsyncResp> aResp,
                         }
                     }
                 }
+#endif
+                else if (property.first == "PartNumber")
+                {
+                    aResp->res.jsonValue["PartNumber"] = property.second;
+                }
+                else if (property.first == "SerialNumber")
+                {
+                    aResp->res.jsonValue["SerialNumber"] = property.second;
+                }
+                else if (property.first == "Manufacturer")
+                {
+                    aResp->res.jsonValue["Manufacturer"] = property.second;
+                }
             }
         },
         service, objPath, "org.freedesktop.DBus.Properties", "GetAll", "");
diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 93eb403..13363a5 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -215,8 +215,35 @@ void getComputerSystem(std::shared_ptr<AsyncResp> aResp,
                                                              VariantType>
                                                  &property : properties)
                                         {
+                                            if (property.first == "PrettyName")
+                                            {
+                                                const std::string *value =
+                                                    std::get_if<std::string>(&property.second);
+                                                if (value != nullptr)
+                                                {
+                                                    std::vector<std::string> values;
+                                                    boost::split(values, *value, boost::is_any_of(" "));
+                                                    for (size_t i = 0; i < values.size(); i++)
+                                                    {
+                                                        if (boost::find_first(values[i], "MiB"))
+                                                        {
+                                                            int value = aResp->res.jsonValue
+                                                                ["MemorySummary"]["TotalSystemMemoryGi"
+                                                                "B"];
+                                                            value += (std::stoi(values[i-1]) / 1024);
+
+                                                            aResp->res.jsonValue
+                                                                ["MemorySummary"]["TotalSystemMemoryGi"
+                                                                "B"] = value;
+                                                            aResp->res.jsonValue
+                                                                ["MemorySummary"]["Status"]["State"] = "Enabled";
+                                                        }
+                                                    }
+                                                }
+                                            }
+#if 0
                                             if (property.first !=
-                                                "MemorySizeInKB")
+                                                "MemorySizeInKb")
                                             {
                                                 continue;
                                             }
@@ -254,6 +281,7 @@ void getComputerSystem(std::shared_ptr<AsyncResp> aResp,
                                                 .jsonValue["MemorySummary"]
                                                           ["Status"]["State"] =
                                                 "Enabled";
+#endif
                                         }
                                     }
                                     else
@@ -289,8 +317,11 @@ void getComputerSystem(std::shared_ptr<AsyncResp> aResp,
                                 },
                                 connection.first, path,
                                 "org.freedesktop.DBus.Properties", "GetAll",
+#if 0
                                 "xyz.openbmc_project.Inventory.Item.Dimm");
-
+#else
+                                "xyz.openbmc_project.Inventory.Item");
+#endif
                             memoryHealth->inventory.emplace_back(path);
                         }
                         else if (interfaceName ==
-- 
2.17.1

